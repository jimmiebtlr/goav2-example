// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// api service
//
// Command:
// $ goa gen github.com/jimmiebtlr/goav2-example/design

package api

import (
	"context"

	apiviews "github.com/jimmiebtlr/goav2-example/gen/api/views"
)

// API of service
type Service interface {
	// Show info of the service
	Info(context.Context) (res *APIInfo, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "api"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"info"}

// APIInfo is the result type of the api service info method.
type APIInfo struct {
	// ID of the service
	ID *string
	// Service's name
	ServiceName *string
	// Service's version
	Version *string
}

// NewAPIInfo initializes result type APIInfo from viewed result type APIInfo.
func NewAPIInfo(vres *apiviews.APIInfo) *APIInfo {
	var res *APIInfo
	switch vres.View {
	case "default", "":
		res = newAPIInfo(vres.Projected)
	}
	return res
}

// NewViewedAPIInfo initializes viewed result type APIInfo from result type
// APIInfo using the given view.
func NewViewedAPIInfo(res *APIInfo, view string) *apiviews.APIInfo {
	var vres *apiviews.APIInfo
	switch view {
	case "default", "":
		p := newAPIInfoView(res)
		vres = &apiviews.APIInfo{p, "default"}
	}
	return vres
}

// newAPIInfo converts projected type APIInfo to service type APIInfo.
func newAPIInfo(vres *apiviews.APIInfoView) *APIInfo {
	res := &APIInfo{
		ID:          vres.ID,
		ServiceName: vres.ServiceName,
		Version:     vres.Version,
	}
	return res
}

// newAPIInfoView projects result type APIInfo into projected type APIInfoView
// using the "default" view.
func newAPIInfoView(res *APIInfo) *apiviews.APIInfoView {
	vres := &apiviews.APIInfoView{
		ID:          res.ID,
		ServiceName: res.ServiceName,
		Version:     res.Version,
	}
	return vres
}
