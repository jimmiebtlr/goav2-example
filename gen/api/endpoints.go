// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// api endpoints
//
// Command:
// $ goa gen github.com/jimmiebtlr/goav2-example/design

package api

import (
	"context"

	goa "goa.design/goa"
)

// Endpoints wraps the "api" service endpoints.
type Endpoints struct {
	Info goa.Endpoint
}

// NewEndpoints wraps the methods of the "api" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Info: NewInfoEndpoint(s),
	}
}

// Use applies the given middleware to all the "api" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Info = m(e.Info)
}

// NewInfoEndpoint returns an endpoint function that calls the method "info" of
// service "api".
func NewInfoEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.Info(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedAPIInfo(res, "default")
		return vres, nil
	}
}
