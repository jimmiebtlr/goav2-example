// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// widget views
//
// Command:
// $ goa gen github.com/jimmiebtlr/goav2-example/design

package views

import (
	goa "goa.design/goa"
)

// WidgetCollection is the viewed result type that is projected based on a view.
type WidgetCollection struct {
	// Type to project
	Projected WidgetCollectionView
	// View to render
	View string
}

// WidgetCollectionView is a type that runs validations on a projected type.
type WidgetCollectionView []*WidgetView

// WidgetView is a type that runs validations on a projected type.
type WidgetView struct {
	// ID of the service
	ID *string
}

// Validate runs the validations defined on the viewed result type
// WidgetCollection.
func (result WidgetCollection) Validate() (err error) {
	switch result.View {
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// Validate runs the validations defined on WidgetCollectionView using the
// "default" view.
func (result WidgetCollectionView) Validate() (err error) {
	for _, item := range result {
		if err2 := item.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on WidgetView using the "default" view.
func (result *WidgetView) Validate() (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	return
}
