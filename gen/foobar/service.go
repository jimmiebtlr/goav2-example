// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// foobar service
//
// Command:
// $ goa gen github.com/jimmiebtlr/goav2-example/design

package foobar

import (
	"context"

	foobarviews "github.com/jimmiebtlr/goav2-example/gen/foobar/views"
)

// Foobar microservice
type Service interface {
	// Show info of the service
	List(context.Context) (res FoobarCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "foobar"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"list"}

// FoobarCollection is the result type of the foobar service list method.
type FoobarCollection []*Foobar

// Info about service a
type Foobar struct {
	// ID of the service
	ID string
}

// NewFoobarCollection initializes result type FoobarCollection from viewed
// result type FoobarCollection.
func NewFoobarCollection(vres foobarviews.FoobarCollection) FoobarCollection {
	var res FoobarCollection
	switch vres.View {
	case "default", "":
		res = newFoobarCollection(vres.Projected)
	}
	return res
}

// NewViewedFoobarCollection initializes viewed result type FoobarCollection
// from result type FoobarCollection using the given view.
func NewViewedFoobarCollection(res FoobarCollection, view string) foobarviews.FoobarCollection {
	var vres foobarviews.FoobarCollection
	switch view {
	case "default", "":
		p := newFoobarCollectionView(res)
		vres = foobarviews.FoobarCollection{p, "default"}
	}
	return vres
}

// newFoobarCollection converts projected type FoobarCollection to service type
// FoobarCollection.
func newFoobarCollection(vres foobarviews.FoobarCollectionView) FoobarCollection {
	res := make(FoobarCollection, len(vres))
	for i, n := range vres {
		res[i] = newFoobar(n)
	}
	return res
}

// newFoobarCollectionView projects result type FoobarCollection into projected
// type FoobarCollectionView using the "default" view.
func newFoobarCollectionView(res FoobarCollection) foobarviews.FoobarCollectionView {
	vres := make(foobarviews.FoobarCollectionView, len(res))
	for i, n := range res {
		vres[i] = newFoobarView(n)
	}
	return vres
}

// newFoobar converts projected type Foobar to service type Foobar.
func newFoobar(vres *foobarviews.FoobarView) *Foobar {
	res := &Foobar{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	return res
}

// newFoobarView projects result type Foobar into projected type FoobarView
// using the "default" view.
func newFoobarView(res *Foobar) *foobarviews.FoobarView {
	vres := &foobarviews.FoobarView{
		ID: &res.ID,
	}
	return vres
}
