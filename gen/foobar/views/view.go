// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// foobar views
//
// Command:
// $ goa gen github.com/jimmiebtlr/goav2-example/design

package views

import (
	goa "goa.design/goa"
)

// FoobarCollection is the viewed result type that is projected based on a view.
type FoobarCollection struct {
	// Type to project
	Projected FoobarCollectionView
	// View to render
	View string
}

// FoobarCollectionView is a type that runs validations on a projected type.
type FoobarCollectionView []*FoobarView

// FoobarView is a type that runs validations on a projected type.
type FoobarView struct {
	// ID of the service
	ID *string
}

// Validate runs the validations defined on the viewed result type
// FoobarCollection.
func (result FoobarCollection) Validate() (err error) {
	switch result.View {
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// Validate runs the validations defined on FoobarCollectionView using the
// "default" view.
func (result FoobarCollectionView) Validate() (err error) {
	for _, item := range result {
		if err2 := item.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on FoobarView using the "default" view.
func (result *FoobarView) Validate() (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	return
}
